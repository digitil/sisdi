#!/bin/bash

requires() {
    declare -r parentprocess=$PPID
    read_sisdi_source
    local name=$1
    local path=$(find_function $name)
    load $path
}

read_sisdi_source() {
    declare -r parentdirectory=$(get_caller_directory)
    declare -r sisdisource="$parentdirectory/.sisdi.source"
    if [[ ! -r "$sisdisource" ]]; then
        exception "no .sisdi.source file found in $parentdirectory"
    fi

    get_sisdi_source_properties
}

get_caller_directory() {
    # determine the working directory of the process that called 'requires'
    echo $( dirname $(lsof -p $parentprocess | grep '[0-9]\{2,\}[rwu]' | awk '{print $9}') )
}

get_sisdi_source_properties() {
    source "$sisdisource"
    validate_repositories
}

validate_repositories() {
    for (( i = 0; i < ${#repositories[@]}; i++ )); do
        local repository=${repositories[$i]}
        local protocolregex='s/^\([a-zA-Z]\{2,\}\):\/\/.*/\1/'
        local protocol=$(echo $repository | sed "$protocolregex")

        case $protocol in
            file )
                repositories[$i]="$protocol://$(check_file_repository $repository)"
                ;;
        esac
    done
}

check_file_repository() { local repository=$1;
    local protocol='file:\/\/'
    local path=$(echo $repository | sed "s/^$protocol//")

    if is_relative $path ; then
        path="$(get_caller_directory)/$path"
    fi

    test -d "$path" || {
        exception "invalid repository $1" ;
    }

    echo $path
}

is_relative() { local path=$1;
    [[ "$path" == \/* ]] && return 1 || return 0
}

exception() {
    local trigger=( $(caller) )
    >&2 echo -e "${trigger[1]}: line ${trigger[0]}:" $@
    exit 1
}

find_function() { local name=$1;
    for repository in "${repositories[@]}"; do
        if curl --silent --head $repository/$name.bash >/dev/null ; then
            echo $repository/$1.bash
            return
        fi 
    done
    exception "function '$1' not found in repositories"
}

load() { local path=$1;
    curl --silent $path
}

requires $@